{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\yerbu\\\\CODE\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\yerbu\\\\CODE\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import Decentragram from'../abis/Decentragram.json';import React,{Component}from'react';import Identicon from'identicon.js';import Navbar from'./Navbar';import Main from'./Main';import Web3 from'web3';import'./App.css';//Declare IPFS\nvar ipfsClient=require('ipfs-http-client');var ipfs=ipfsClient({host:'ipfs.infura.io',port:5001,protocol:'https'});// leaving out the arguments will default to these values\nclass App extends Component{componentWillMount(){var _this=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _this.loadWeb3();case 2:_context.next=4;return _this.loadBlockchainData();case 4:case\"end\":return _context.stop();}}},_callee);}))();}loadWeb3(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.ethereum){_context2.next=6;break;}window.web3=new Web3(window.ethereum);_context2.next=4;return window.ethereum.enable();case 4:_context2.next=7;break;case 6:if(window.web3){window.web3=new Web3(window.web3.currentProvider);}else{window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');}case 7:case\"end\":return _context2.stop();}}},_callee2);}))();}loadBlockchainData(){var _this2=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var web3,accounts,networkId,networkData,decentragram,imagesCount,i,image;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:web3=window.web3;// Load account\n_context3.next=3;return web3.eth.getAccounts();case 3:accounts=_context3.sent;_this2.setState({account:accounts[0]});// Network ID\n_context3.next=7;return web3.eth.net.getId();case 7:networkId=_context3.sent;networkData=Decentragram.networks[networkId];if(!networkData){_context3.next=29;break;}decentragram=new web3.eth.Contract(Decentragram.abi,networkData.address);_this2.setState({decentragram});_context3.next=14;return decentragram.methods.imageCount().call();case 14:imagesCount=_context3.sent;_this2.setState({imagesCount});// Load images\ni=1;case 17:if(!(i<=imagesCount)){_context3.next=25;break;}_context3.next=20;return decentragram.methods.images(i).call();case 20:image=_context3.sent;_this2.setState({images:[..._this2.state.images,image]});case 22:i++;_context3.next=17;break;case 25:// Sort images. Show highest tipped images first\n_this2.setState({images:_this2.state.images.sort((a,b)=>b.tipAmount-a.tipAmount)});_this2.setState({loading:false});_context3.next=30;break;case 29:window.alert('Decentragram contract not deployed to detected network.');case 30:case\"end\":return _context3.stop();}}},_callee3);}))();}tipImageOwner(id,tipAmount){this.setState({loading:true});this.state.decentragram.methods.tipImageOwner(id).send({from:this.state.account,value:tipAmount}).on('transactionHash',hash=>{this.setState({loading:false});});}constructor(props){super(props);this.captureFile=event=>{event.preventDefault();var file=event.target.files[0];var reader=new window.FileReader();reader.readAsArrayBuffer(file);reader.onloadend=()=>{this.setState({buffer:Buffer(reader.result)});console.log('buffer',this.state.buffer);};};this.uploadImage=description=>{console.log(\"Submitting file to ipfs...\");//adding file to the IPFS\nipfs.add(this.state.buffer,(error,result)=>{console.log('Ipfs result',result);if(error){console.error(error);return;}this.setState({loading:true});this.state.decentragram.methods.uploadImage(result[0].hash,description).send({from:this.state.account}).on('transactionHash',hash=>{this.setState({loading:false});});});};this.state={account:'',decentragram:null,images:[],loading:true};this.uploadImage=this.uploadImage.bind(this);this.tipImageOwner=this.tipImageOwner.bind(this);this.captureFile=this.captureFile.bind(this);}render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Navbar,{account:this.state.account}),this.state.loading?/*#__PURE__*/React.createElement(\"div\",{id:\"loader\",className:\"text-center mt-5\"},/*#__PURE__*/React.createElement(\"p\",null,\"Loading...\")):/*#__PURE__*/React.createElement(Main,{images:this.state.images,captureFile:this.captureFile,uploadImage:this.uploadImage,tipImageOwner:this.tipImageOwner}));}}export default App;","map":{"version":3,"sources":["C:/Users/yerbu/CODE/decentragram/src/components/App.js"],"names":["Decentragram","React","Component","Identicon","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","sort","a","b","tipAmount","loading","tipImageOwner","id","send","from","value","on","hash","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadImage","description","add","error","bind","render"],"mappings":"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","sourcesContent":["import Decentragram from '../abis/Decentragram.json'\r\nimport React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = Decentragram.networks[networkId]\r\n    if(networkData) {\r\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\r\n      this.setState({ decentragram })\r\n      const imagesCount = await decentragram.methods.imageCount().call()\r\n      this.setState({ imagesCount })\r\n      // Load images\r\n      for (var i = 1; i <= imagesCount; i++) {\r\n        const image = await decentragram.methods.images(i).call()\r\n        this.setState({\r\n          images: [...this.state.images, image]\r\n        })\r\n      }\r\n      // Sort images. Show highest tipped images first\r\n      this.setState({\r\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\r\n      })\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('Decentragram contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  captureFile = event => {\r\n\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  uploadImage = description => {\r\n    console.log(\"Submitting file to ipfs...\")\r\n\r\n    //adding file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('Ipfs result', result)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({ loading: true })\r\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    })\r\n  }\r\n\r\n  tipImageOwner(id, tipAmount) {\r\n    this.setState({ loading: true })\r\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      decentragram: null,\r\n      images: [],\r\n      loading: true\r\n    }\r\n\r\n    this.uploadImage = this.uploadImage.bind(this)\r\n    this.tipImageOwner = this.tipImageOwner.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              images={this.state.images}\r\n              captureFile={this.captureFile}\r\n              uploadImage={this.uploadImage}\r\n              tipImageOwner={this.tipImageOwner}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}