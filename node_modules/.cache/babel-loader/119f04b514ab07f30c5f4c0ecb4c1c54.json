{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\yerbu\\\\CODE\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\yerbu\\\\CODE\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\yerbu\\\\CODE\\\\decentragram\\\\src\\\\components\\\\App.js\";\nimport Decentragram from '../abis/Decentragram.json';\nimport React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, decentragram, imagesCount, i, image;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              }); // Network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              networkData = Decentragram.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 29;\n                break;\n              }\n\n              decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address);\n\n              _this2.setState({\n                decentragram\n              });\n\n              _context3.next = 14;\n              return decentragram.methods.imageCount().call();\n\n            case 14:\n              imagesCount = _context3.sent;\n\n              _this2.setState({\n                imagesCount\n              }); // Load images\n\n\n              i = 1;\n\n            case 17:\n              if (!(i <= imagesCount)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return decentragram.methods.images(i).call();\n\n            case 20:\n              image = _context3.sent;\n\n              _this2.setState({\n                images: [..._this2.state.images, image]\n              });\n\n            case 22:\n              i++;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              // Sort images. Show highest tipped images first\n              _this2.setState({\n                images: _this2.state.images.sort((a, b) => b.tipAmount - a.tipAmount)\n              });\n\n              _this2.setState({\n                loading: false\n              });\n\n              _context3.next = 30;\n              break;\n\n            case 29:\n              window.alert('Decentragram contract not deployed to detected network.');\n\n            case 30:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({\n      loading: true\n    });\n    this.state.decentragram.methods.tipImageOwner(id).send({\n      from: this.state.account,\n      value: tipAmount\n    }).on('transactionHash', hash => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadImage = description => {\n      console.log(\"Submitting file to ipfs...\"); //adding file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.decentragram.methods.uploadImage(result[0].hash, description).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    };\n    this.uploadImage = this.uploadImage.bind(this);\n    this.tipImageOwner = this.tipImageOwner.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      images: this.state.images,\n      captureFile: this.captureFile,\n      uploadImage: this.uploadImage,\n      tipImageOwner: this.tipImageOwner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/yerbu/CODE/decentragram/src/components/App.js"],"names":["Decentragram","React","Component","Identicon","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","sort","a","b","tipAmount","loading","tipImageOwner","id","send","from","value","on","hash","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadImage","description","add","error","bind","render"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP,C,CAEA;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAMC,IAAI,GAAGF,UAAU,CAAC;AAAEG,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE,IAAhC;AAAsCC,EAAAA,QAAQ,EAAE;AAAhD,CAAD,CAAvB,C,CAAmF;;AAEnF,MAAMC,GAAN,SAAkBX,SAAlB,CAA4B;AAEpBY,EAAAA,kBAAN,GAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnB,KAAI,CAACC,QAAL,EADmB;;AAAA;AAAA;AAAA,qBAEnB,KAAI,CAACC,kBAAL,EAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG1B;;AAEKD,EAAAA,QAAN,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXE,MAAM,CAACC,QADI;AAAA;AAAA;AAAA;;AAEbD,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAd;AAFa;AAAA,qBAGPD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHO;;AAAA;AAAA;AAAA;;AAAA;AAKV,kBAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,eAFI,MAGA;AACHJ,gBAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACD;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWhB;;AAEKN,EAAAA,kBAAN,GAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBG,cAAAA,IADmB,GACZF,MAAM,CAACE,IADK,EAEzB;;AAFyB;AAAA,qBAGFA,IAAI,CAACI,GAAL,CAASC,WAAT,EAHE;;AAAA;AAGnBC,cAAAA,QAHmB;;AAIzB,cAAA,MAAI,CAACC,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAEF,QAAQ,CAAC,CAAD;AAAnB,eAAd,EAJyB,CAKzB;;;AALyB;AAAA,qBAMDN,IAAI,CAACI,GAAL,CAASK,GAAT,CAAaC,KAAb,EANC;;AAAA;AAMnBC,cAAAA,SANmB;AAOnBC,cAAAA,WAPmB,GAOL/B,YAAY,CAACgC,QAAb,CAAsBF,SAAtB,CAPK;;AAAA,mBAQtBC,WARsB;AAAA;AAAA;AAAA;;AASjBE,cAAAA,YATiB,GASF,IAAId,IAAI,CAACI,GAAL,CAASW,QAAb,CAAsBlC,YAAY,CAACmC,GAAnC,EAAwCJ,WAAW,CAACK,OAApD,CATE;;AAUvB,cAAA,MAAI,CAACV,QAAL,CAAc;AAAEO,gBAAAA;AAAF,eAAd;;AAVuB;AAAA,qBAWGA,YAAY,CAACI,OAAb,CAAqBC,UAArB,GAAkCC,IAAlC,EAXH;;AAAA;AAWjBC,cAAAA,WAXiB;;AAYvB,cAAA,MAAI,CAACd,QAAL,CAAc;AAAEc,gBAAAA;AAAF,eAAd,EAZuB,CAavB;;;AACSC,cAAAA,CAdc,GAcV,CAdU;;AAAA;AAAA,oBAcPA,CAAC,IAAID,WAdE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAeDP,YAAY,CAACI,OAAb,CAAqBK,MAArB,CAA4BD,CAA5B,EAA+BF,IAA/B,EAfC;;AAAA;AAefI,cAAAA,KAfe;;AAgBrB,cAAA,MAAI,CAACjB,QAAL,CAAc;AACZgB,gBAAAA,MAAM,EAAE,CAAC,GAAG,MAAI,CAACE,KAAL,CAAWF,MAAf,EAAuBC,KAAvB;AADI,eAAd;;AAhBqB;AAcWF,cAAAA,CAAC,EAdZ;AAAA;AAAA;;AAAA;AAoBvB;AACA,cAAA,MAAI,CAACf,QAAL,CAAc;AACZgB,gBAAAA,MAAM,EAAE,MAAI,CAACE,KAAL,CAAWF,MAAX,CAAkBG,IAAlB,CAAuB,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAAhD;AADI,eAAd;;AAGA,cAAA,MAAI,CAACtB,QAAL,CAAc;AAAEuB,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAxBuB;AAAA;;AAAA;AA0BvBhC,cAAAA,MAAM,CAACK,KAAP,CAAa,yDAAb;;AA1BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B1B;;AAiCD4B,EAAAA,aAAa,CAACC,EAAD,EAAKH,SAAL,EAAgB;AAC3B,SAAKtB,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKL,KAAL,CAAWX,YAAX,CAAwBI,OAAxB,CAAgCa,aAAhC,CAA8CC,EAA9C,EAAkDC,IAAlD,CAAuD;AAAEC,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWjB,OAAnB;AAA4B2B,MAAAA,KAAK,EAAEN;AAAnC,KAAvD,EAAuGO,EAAvG,CAA0G,iBAA1G,EAA8HC,IAAD,IAAU;AACrI,WAAK9B,QAAL,CAAc;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAFD;AAGD;;AAEDQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAtCnBC,WAsCmB,GAtCLC,KAAK,IAAI;AAErBA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIhD,MAAM,CAACiD,UAAX,EAAf;AACAD,MAAAA,MAAM,CAACE,iBAAP,CAAyBL,IAAzB;;AAEAG,MAAAA,MAAM,CAACG,SAAP,GAAmB,MAAM;AACvB,aAAK1C,QAAL,CAAc;AAAE2C,UAAAA,MAAM,EAAEC,MAAM,CAACL,MAAM,CAACM,MAAR;AAAhB,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAK7B,KAAL,CAAWyB,MAAjC;AACD,OAHD;AAID,KA2BkB;;AAAA,SAzBnBK,WAyBmB,GAzBLC,WAAW,IAAI;AAC3BH,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAD2B,CAG3B;;AACAhE,MAAAA,IAAI,CAACmE,GAAL,CAAS,KAAKhC,KAAL,CAAWyB,MAApB,EAA4B,CAACQ,KAAD,EAAQN,MAAR,KAAmB;AAC7CC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAA3B;;AACA,YAAGM,KAAH,EAAU;AACRL,UAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACA;AACD;;AAED,aAAKnD,QAAL,CAAc;AAAEuB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,aAAKL,KAAL,CAAWX,YAAX,CAAwBI,OAAxB,CAAgCqC,WAAhC,CAA4CH,MAAM,CAAC,CAAD,CAAN,CAAUf,IAAtD,EAA4DmB,WAA5D,EAAyEvB,IAAzE,CAA8E;AAAEC,UAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWjB;AAAnB,SAA9E,EAA4G4B,EAA5G,CAA+G,iBAA/G,EAAmIC,IAAD,IAAU;AAC1I,eAAK9B,QAAL,CAAc;AAAEuB,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAFD;AAGD,OAXD;AAYD,KASkB;;AAEjB,SAAKL,KAAL,GAAa;AACXjB,MAAAA,OAAO,EAAE,EADE;AAEXM,MAAAA,YAAY,EAAE,IAFH;AAGXS,MAAAA,MAAM,EAAE,EAHG;AAIXO,MAAAA,OAAO,EAAE;AAJE,KAAb;AAOA,SAAKyB,WAAL,GAAmB,KAAKA,WAAL,CAAiBI,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAK5B,aAAL,GAAqB,KAAKA,aAAL,CAAmB4B,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKnB,WAAL,GAAmB,KAAKA,WAAL,CAAiBmB,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKnC,KAAL,CAAWjB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEI,KAAKiB,KAAL,CAAWK,OAAX,gBACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAiB,MAAA,SAAS,EAAC,kBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA9C,CADF,gBAEE,oBAAC,IAAD;AACE,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWF,MADrB;AAEE,MAAA,WAAW,EAAE,KAAKiB,WAFpB;AAGE,MAAA,WAAW,EAAE,KAAKe,WAHpB;AAIE,MAAA,aAAa,EAAE,KAAKxB,aAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJN,CADF;AAcD;;AArHyB;;AAwH5B,eAAerC,GAAf","sourcesContent":["import Decentragram from '../abis/Decentragram.json'\r\nimport React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = Decentragram.networks[networkId]\r\n    if(networkData) {\r\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\r\n      this.setState({ decentragram })\r\n      const imagesCount = await decentragram.methods.imageCount().call()\r\n      this.setState({ imagesCount })\r\n      // Load images\r\n      for (var i = 1; i <= imagesCount; i++) {\r\n        const image = await decentragram.methods.images(i).call()\r\n        this.setState({\r\n          images: [...this.state.images, image]\r\n        })\r\n      }\r\n      // Sort images. Show highest tipped images first\r\n      this.setState({\r\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\r\n      })\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('Decentragram contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  captureFile = event => {\r\n\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  uploadImage = description => {\r\n    console.log(\"Submitting file to ipfs...\")\r\n\r\n    //adding file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('Ipfs result', result)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({ loading: true })\r\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    })\r\n  }\r\n\r\n  tipImageOwner(id, tipAmount) {\r\n    this.setState({ loading: true })\r\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      decentragram: null,\r\n      images: [],\r\n      loading: true\r\n    }\r\n\r\n    this.uploadImage = this.uploadImage.bind(this)\r\n    this.tipImageOwner = this.tipImageOwner.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              images={this.state.images}\r\n              captureFile={this.captureFile}\r\n              uploadImage={this.uploadImage}\r\n              tipImageOwner={this.tipImageOwner}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}